{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","gameLogic.js","App.js","serviceWorker.js","index.js"],"names":["SqButton","styled","button","Square","value","onClick","BoardWrapper","div","Board","squares","map","square","i","key","Display","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","lines","length","a","b","c","selectWinner","boardCopy","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"meAGA,IAAMA,EAAWC,IAAOC,OAAV,KASC,SAASC,EAAT,GAAoC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAEpC,OACI,kBAACL,EAAD,CAAUK,QAASA,GACdD,G,+PCZb,IAAME,EAAeL,IAAOM,IAAV,KAUH,SAASC,EAAT,GAAqC,IAApBC,EAAmB,EAAnBA,QAASJ,EAAU,EAAVA,QAErC,OACI,kBAACC,EAAD,KACKG,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACT,kBAACT,EAAD,CAAQU,IAAKD,EAAGR,MAAOO,EAAQN,QAAS,kBAAMA,EAAQO,U,oHCZtE,IAAME,EAAUb,IAAOM,IAAV,KAME,SAASQ,IAAO,IAAD,EAEAC,mBAASC,MAAM,GAAGC,KAAK,OAFvB,mBAEnBC,EAFmB,KAEZC,EAFY,OAGIJ,oBAAS,GAHb,mBAGnBK,EAHmB,KAGVC,EAHU,KAIpBC,ECjBH,SAAuBd,GAY1B,IAXA,IAAMe,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFZ,EAAI,EAAGA,EAAIY,EAAMC,OAAQb,IAAI,CAAC,IAAD,cAChBY,EAAMZ,GADU,GAC3Bc,EAD2B,KACxBC,EADwB,KACrBC,EADqB,KAElC,GAAInB,EAAQiB,IAAMjB,EAAQiB,KAAOjB,EAAQkB,IAAMlB,EAAQiB,KAAOjB,EAAQmB,GAClE,OAAOnB,EAAQiB,GAGvB,OAAO,KDDQG,CAAaV,GAoB5B,OACI,oCACI,kBAACX,EAAD,CAAOC,QAASU,EAAOd,QApB/B,SAAqBO,GACjB,IAAMkB,EAAS,YAAOX,GAEnBI,GAAUO,EAAUlB,KAEvBkB,EAAUlB,GAAKS,EAAU,IAAM,IAC/BD,EAASU,GACTR,GAAYD,OAcR,kBAACP,EAAD,KACI,2BAAIS,EAAS,WAAaA,EAAS,iBAAmBF,EAAU,IAAM,MAPvE,4BAAQhB,QAAS,kBAAMe,EAASH,MAAM,GAAGC,KAAK,SAA9C,iBEpBAa,MARf,WACE,OACE,6BACE,kBAAChB,EAAD,QCGciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a5d81fbe.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst SqButton = styled.button`\n    background: white;\n    border: 0.08em solid black;\n    font-size: 30px;\n    font-weight: 800;\n    cursor: pointer;\n    outline: none;\n`\n\nexport default function Square({ value, onClick }){\n\n    return(\n        <SqButton onClick={onClick}>\n            {value}\n        </SqButton>\n    )\n}","import React from 'react' \nimport Square from \"./Square\"\nimport styled from 'styled-components'\n\nconst BoardWrapper = styled.div`\n    border: 0.22em solid black;\n    width: 15em;\n    height: 15em;\n    margin: auto;\n    margin-top: 8em;\n    display: grid;\n    grid-template: repeat(3, 1fr) / repeat(3, 1fr);\n`\n\nexport default function Board({ squares, onClick }){\n\n    return(\n        <BoardWrapper>\n            {squares.map((square, i) => (\n                <Square key={i} value={square} onClick={() => onClick(i)}></Square>\n            ))}\n        </BoardWrapper>\n    )\n}","import React, {useState} from 'react'\nimport styled from 'styled-components'\n\nimport {selectWinner} from '../gameLogic'\nimport Board from \"./Board\"\n\n\nconst Display = styled.div`\n    width: 200px;\n    margin: 20px auto;\n\n`\n\nexport default function Game(){\n\n    const [board, setBoard] = useState(Array(9).fill(null))\n    const [xIsNext, setXisNext] = useState(true)\n    const winner = selectWinner(board)\n\n    function handleClick(i){\n        const boardCopy = [...board]\n        // checked if game is won OR square is used\n        if(winner || boardCopy[i]) return\n        // if not, set value of square to the value of square index -> make next move opposite of previous move\n        boardCopy[i] = xIsNext ? 'X' : 'O'\n        setBoard(boardCopy)\n        setXisNext(!xIsNext)\n    }\n\n    function jumpTo(){\n\n    }\n\n    function newGame(){\n        return <button onClick={() => setBoard(Array(9).fill(null))}> Start Game</button>\n    }\n\n    return(\n        <>\n            <Board squares={board} onClick={handleClick}></Board>\n            <Display>\n                <p>{winner ? \"Winner: \" + winner : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}</p>\n                {newGame()}\n            </Display>\n        </>\n    )\n}","export function selectWinner (squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ]\n\n    for (let i = 0; i < lines.length; i++){\n        const [a, b, c] = lines[i]\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c] ){\n            return squares[a]\n        }\n    }\n    return null;\n}","import React from 'react';\n\nimport './App.css';\n\nimport Game from \"./components/Game\"\n\nfunction App() {\n  return (\n    <div>\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}